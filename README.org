#+TITLE: org-mcp
#+AUTHOR: org-mcp contributors

* Overview

org-mcp is an Emacs package that implements a Model Context Protocol (MCP) server for Org-mode. It enables AI assistants and other MCP clients to interact with your Org files through a secure, structured API.

* Installation

TODO: Installation instructions

* Usage

** Registering with an MCP Client

After =mcp-server-lib= has been properly installed (including =M-x mcp-server-lib-install=), register =org-mcp= with your MCP client:

#+begin_src bash
claude mcp add -s user -t stdio org-mcp -- ~/.emacs.d/emacs-mcp-stdio.sh --init-function=org-mcp-enable --stop-function=org-mcp-disable
#+end_src

Before using the MCP server, you must start it in Emacs with =M-x mcp-server-lib-start=. Stop it with =M-x mcp-server-lib-stop= when done.

** Available MCP Resources

*** org://{filename}
- *Description:* Access the raw content of an allowed Org file
- *URI Pattern:* =org://{filename}= where filename is the base name of the file
- *Configuration:* Files must be explicitly allowed via =org-mcp-allowed-files=
- *Returns:* Plain text content of the Org file

Example:
#+begin_example
# Configure allowed files in Emacs:
(setq org-mcp-allowed-files '("~/org/projects.org" "~/org/tasks.org"))

# Access via MCP:
URI: org://projects.org
Returns: Full content of ~/org/projects.org
#+end_example

*** org-outline://{filename}
- *Description:* Get the hierarchical structure of an Org file
- *URI Pattern:* =org-outline://{filename}= where filename is the base name of the file
- *Configuration:* Files must be explicitly allowed via =org-mcp-allowed-files=
- *Returns:* JSON representation of the document structure with headings and their levels

Example:
#+begin_example
# Access via MCP:
URI: org-outline://projects.org
Returns: JSON structure like:
{
  "headings": [
    {
      "title": "Project Alpha",
      "level": 1,
      "children": [
        {"title": "Requirements", "level": 2, "children": []},
        {"title": "Implementation", "level": 2, "children": []}
      ]
    }
  ]
}
#+end_example

*** org-headline://{filename}/{path}
- *Description:* Access the content of a specific headline by its path
- *URI Pattern:* =org-headline://{filename}/{path}= where path is URL-encoded headline titles separated by =/=
- *Configuration:* Files must be explicitly allowed via =org-mcp-allowed-files=
- *Returns:* Plain text content of the specified headline section including all subheadings

Example:
#+begin_example
# Access a top-level headline:
URI: org-headline://projects.org/Project%20Alpha
Returns: Content of "Project Alpha" heading and all its subheadings

# Access a nested headline:
URI: org-headline://projects.org/Project%20Alpha/Requirements
Returns: Content of "Requirements" under "Project Alpha"
#+end_example

*** org-id URI Format
- *Description:* Access Org node content by its unique ID property
- *URI Pattern:* =org-id://{uuid}= where uuid is the value of an ID property
- *Configuration:* The file containing the ID must be in =org-mcp-allowed-files=
- *Returns:* Plain text content of the headline with the specified ID, including all subheadings

Example:
#+begin_example
# Org file with ID property:
* Project Meeting Notes
:PROPERTIES:
:ID: 550e8400-e29b-41d4-a716-446655440000
:END:
Meeting content here...

# Access via MCP:
URI: org-id://550e8400-e29b-41d4-a716-446655440000
Returns: Content of "Project Meeting Notes" section
#+end_example

** Available MCP Tools

*** org-get-todo-config
- *Description:* Get TODO keyword configuration for understanding task states
- *Parameters:* None
- *Returns:* JSON object with =sequences= and =semantics=

Example response:
#+begin_src json
{
  "sequences": [
    {
      "type": "sequence",
      "keywords": ["TODO", "NEXT", "|", "DONE", "CANCELLED"]
    }
  ],
  "semantics": [
    {"state": "TODO", "isFinal": false, "sequenceType": "sequence"},
    {"state": "NEXT", "isFinal": false, "sequenceType": "sequence"},
    {"state": "DONE", "isFinal": true, "sequenceType": "sequence"},
    {"state": "CANCELLED", "isFinal": true, "sequenceType": "sequence"}
  ]
}
#+end_src

*** org-get-tag-config
- *Description:* Get tag configuration as literal Elisp variable values
- *Parameters:* None
- *Returns:* JSON object with literal Elisp strings for all tag-related variables

Example return value:
#+begin_src json
{
  "org-use-tag-inheritance": "t",
  "org-tags-exclude-from-inheritance": "(\"urgent\")",
  "org-tags-sort-function": "nil",
  "org-tag-alist": "((\"work\" . 119) (\"urgent\" . 117) (:startgroup) (\"@office\" . 111) (\"@home\" . 104) (\"@errand\" . 101) (:endgroup) (:startgrouptag) (\"project\") (:grouptags) (\"proj_a\") (\"proj_b\") (:endgrouptag))",
  "org-tag-persistent-alist": "nil"
}
#+end_src

*** org-update-todo-state
- *Description:* Update the TODO state of a specific headline
- *Parameters:*
  - =resourceUri= (string, required): URI of the headline (supports =org-headline://= or =org-id://=)
  - =currentState= (string, required): Current TODO state (empty string "" for no state) - must match actual state
  - =newState= (string, required): New TODO state (must be valid in org-todo-keywords)
- *Returns:* Success status with previous and new states

Example:
#+begin_src json
# Request:
{
  "resourceUri": "org-headline://projects.org/Project%20Alpha",
  "currentState": "TODO",
  "newState": "IN-PROGRESS"
}

# Success response:
{
  "success": true,
  "previousState": "TODO",
  "newState": "IN-PROGRESS"
}

# State mismatch error:
{
  "error": "State mismatch: expected TODO, found IN-PROGRESS"
}
#+end_src

*** org-rename-headline
- *Description:* Rename the title of an existing headline while preserving its TODO state, tags, and properties
- *Parameters:*
  - =resourceUri= (string, required): URI of the headline (supports =org-headline://= or =org-id://=)
  - =currentTitle= (string, required): Current headline title (without TODO state or tags) - must match actual title
  - =newTitle= (string, required): New headline title (without TODO state or tags)
- *Returns:* Success status with previous and new titles

Example:
#+begin_src json
# Request:
{
  "resourceUri": "org-headline://projects.org/Original%20Task",
  "currentTitle": "Original Task",
  "newTitle": "Updated Task Name"
}

# Success response:
{
  "success": true,
  "previousTitle": "Original Task",
  "newTitle": "Updated Task Name",
  "resourceUri": "org-headline://projects.org/Updated%20Task%20Name"
}

# Title mismatch error:
{
  "error": "Title mismatch: expected 'Original Task', found 'Different Task'"
}
#+end_src

*** org-add-todo
- *Description:* Add a new TODO item to an Org file
- *Parameters:*
  - =title= (string, required): The headline text
  - =todoState= (string, required): TODO state from =org-todo-keywords=
  - =tags= (string or array, required): Tags to add (e.g., "urgent" or ["work", "urgent"])
  - =body= (string, optional): Body text content to add under the heading
  - =parentUri= (string, required): URI of parent item. Use =org-headline://filename.org/= for top-level items in a file
  - =afterUri= (string, optional): URI of sibling to insert after. If not given, append as last child of parent
- *Returns:* Object with success status, new item URI, file name, and title

Example:
#+begin_src json
# Request:
{
  "title": "Implement new feature",
  "todoState": "TODO",
  "tags": ["work", "urgent"],
  "body": "This feature needs to be completed by end of week.",
  "parentUri": "org-headline://projects.org/"
}

# Success response:
{
  "success": true,
  "uri": "org-id://550e8400-e29b-41d4-a716-446655440001",
  "file": "projects.org",
  "title": "Implement new feature"
}
#+end_src

* Contributing

TODO: Contribution guidelines

* License

GPLv3